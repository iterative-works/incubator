package works.iterative.incubator.budget.infrastructure.adapter.fio

import works.iterative.incubator.budget.domain.model.AccountId
import java.time.Instant

/** Represents a Fio Bank account connection with secure token storage.
  *
  * This entity stores the encrypted API token and synchronization state for a Fio Bank account.
  * Each FioAccount is associated with a source account in the system.
  *
  * @param id
  *   Unique identifier for the Fio account
  * @param sourceAccountId
  *   The associated source account ID
  * @param encryptedToken
  *   The encrypted Fio API token
  * @param lastSyncTime
  *   The timestamp of the last successful synchronization
  * @param lastFetchedId
  *   The ID of the last transaction fetched
  * @param createdAt
  *   When this account record was created
  * @param updatedAt
  *   When this account record was last updated
  *
  * Category: Entity Layer: Infrastructure
  */
case class FioAccount(
    id: Long,
    sourceAccountId: AccountId,
    encryptedToken: String,
    lastSyncTime: Option[Instant] = None,
    lastFetchedId: Option[Long] = None,
    createdAt: Instant,
    updatedAt: Instant
):
    /** Updates the synchronization state of this account.
      *
      * @param lastSyncTime
      *   The timestamp of the last successful synchronization
      * @param lastFetchedId
      *   The ID of the last transaction fetched
      * @return
      *   A new FioAccount with updated synchronization state
      */
    def updateSyncState(lastSyncTime: Instant, lastFetchedId: Long): FioAccount =
        this.copy(
            lastSyncTime = Some(lastSyncTime),
            lastFetchedId = Some(lastFetchedId),
            updatedAt = Instant.now
        )
end FioAccount

object FioAccount:
    /** Creates a new FioAccount with the given account ID and token.
      *
      * Note: The token is expected to already be encrypted.
      *
      * @param id
      *   Unique identifier for the Fio account (generated by repository)
      * @param sourceAccountId
      *   The associated source account ID
      * @param encryptedToken
      *   The encrypted Fio API token
      * @return
      *   A new FioAccount with default values
      */
    def create(
        id: Long,
        sourceAccountId: AccountId,
        encryptedToken: String
    ): Either[String, FioAccount] =
        if sourceAccountId == null then
            Left("Source account ID must not be null")
        else if encryptedToken == null || encryptedToken.trim.isEmpty then
            Left("Encrypted token must not be null or empty")
        else
            val now = Instant.now
            Right(
                FioAccount(
                    id = id,
                    sourceAccountId = sourceAccountId,
                    encryptedToken = encryptedToken,
                    lastSyncTime = None,
                    lastFetchedId = None,
                    createdAt = now,
                    updatedAt = now
                )
            )
end FioAccount
